from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from database import *
from config import TRAINING_TYPES, ADMIN_IDS, GROUP_CHAT_ID
from utils import format_date

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        return

    keyboard = [
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å", callback_data="admin_schedule")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="admin_add_training")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="admin_edit_training")],
        [InlineKeyboardButton("üë• –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üìã –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤—Ç—Ä–∞", callback_data="admin_tomorrow")],
        [InlineKeyboardButton("üë§ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
    if update.effective_user.id not in ADMIN_IDS:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.",
            reply_markup=reply_markup
        )
        return
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    trainings_by_day = {}
    for i in range(14):  # 7 –¥–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è + 7 –¥–Ω—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        date = monday + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            trainings_by_day[date] = trainings
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not trainings_by_day:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n"
            "–î–æ–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É
    text = "üèãÔ∏è‚Äç‚ôÇÔ∏è –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    keyboard = []
    
    for date, trainings in sorted(trainings_by_day.items()):
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{format_date(date)}*\n"
        text += f"*{weekday_ua}*\n"
        for training in sorted(trainings, key=lambda x: x.time):
            participants = get_training_participants(training.id)
            text += f"  {training.time} {training.type} ({len(participants)} –∑–∞–ø–∏—Å—ñ–≤)\n"
        text += "\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ü—å–æ–≥–æ –¥–Ω—è
        keyboard.append([
            InlineKeyboardButton(
                f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {format_date(date)}",
                callback_data=f"edit_day_{date.strftime('%Y-%m-%d')}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    
    text = f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {date.strftime('%d.%m.%Y')}:\n\n"
    for training in trainings:
        participants = get_training_participants(training.id)
        text += f"{training.time} - {training.type}\n"
        text += f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(participants)} –æ—Å—ñ–±\n\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_schedule")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def add_training_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.now().date()
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    monday = today - timedelta(days=today.weekday())
    keyboard = []
    
    # –ü–æ–∫–∞–∑—É—î–º–æ 14 –¥–Ω—ñ–≤ (–ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å + –Ω–∞—Å—Ç—É–ø–Ω–∏–π)
    for i in range(14):
        date = monday + timedelta(days=i)
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–Ω',
            'Tuesday': '–í—Ç',
            'Wednesday': '–°—Ä',
            'Thursday': '–ß—Ç',
            'Friday': '–ü—Ç',
            'Saturday': '–°–±',
            'Sunday': '–ù–¥'
        }[weekday]
        text = f"{date.strftime('%d.%m.%Y')} ({weekday_ua})"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"add_training_{date.strftime('%Y-%m-%d')}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

async def add_training_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    context.user_data['training_date'] = date_str
    date = datetime.strptime(date_str, '%Y-%m-%d')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ü–µ–π –¥–µ–Ω—å
    existing_trainings = get_trainings_by_date(date)
    existing_times = {t.time: t for t in existing_trainings}
    
    keyboard = []
    for hour in range(8, 22):
        time = f"{hour:02d}:00"
        if time in existing_times:
            training = existing_times[time]
            text = f"‚úÖ {time} - {training.type}"
            callback_data = f"view_existing_{training.id}"
        else:
            text = f"‚è∞ {time}"
            callback_data = f"add_time_{time}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_training")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

async def add_training_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    time = query.data.split('_')[2]
    date = datetime.strptime(context.user_data['training_date'], '%Y-%m-%d')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ü–µ–π —á–∞—Å
    existing_trainings = get_trainings_by_date(date)
    if any(t.time == time for t in existing_trainings):
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_training_{date.strftime('%Y-%m-%d')}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚ùå –ù–∞ —Ü–µ–π —á–∞—Å ({time}) –≤–∂–µ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å.",
            reply_markup=reply_markup
        )
        return
    
    context.user_data['training_time'] = time
    
    keyboard = []
    for type in TRAINING_TYPES:
        keyboard.append([InlineKeyboardButton(type, callback_data=f"add_type_{type}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_training_{date.strftime('%Y-%m-%d')}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

async def save_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_type = query.data.split('_')[2]
    date = datetime.strptime(context.user_data['training_date'], '%Y-%m-%d')
    time = context.user_data['training_time']
    
    training = add_training(date, time, training_type)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="admin_add_training")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(date)} ({weekday_ua})\n"
        f"‚è∞ –ß–∞—Å: {time}\n"
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training_type}"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def edit_training_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.now().date()
    keyboard = []
    
    for i in range(7):
        date = today + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:
            text = f"{date.strftime('%d.%m.%Y')} - {len(trainings)} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"edit_day_{date.strftime('%Y-%m-%d')}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:", reply_markup=reply_markup)

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    users = get_all_users()
    keyboard = []
    
    for user in users:
        text = f"{user.display_name} - {user.paid_trainings} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"user_{user.id}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", reply_markup=reply_markup)

async def user_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[1])
    user = get_user_by_id(user_id)
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ 1 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"add_paid_1_{user_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ 2 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"add_paid_2_{user_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ 3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"add_paid_3_{user_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ 5 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å", callback_data=f"add_paid_5_{user_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ 10 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å", callback_data=f"add_paid_10_{user_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data=f"change_name_{user_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.display_name}\n–û–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user.paid_trainings}"
    await query.edit_message_text(text, reply_markup=reply_markup)

async def edit_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    keyboard = []
    for training in trainings:
        participants = get_training_participants(training.id)
        text = f"{format_date(date)} {training.time} - {training.type} ({len(participants)} –æ—Å—ñ–±)"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"edit_training_{training.id}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_edit_training")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(date)} ({weekday_ua}):", reply_markup=reply_markup)

async def edit_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[2])
    training = get_training_by_id(training_id)
    
    weekday = training.date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"edit_existing_training_{training_id}")],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"delete_training_{training_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_day_{training.date.strftime('%Y-%m-%d')}")]
    ]
    
    text = (
        f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(training.date)} ({weekday_ua}):\n\n"
        f"‚è∞ –ß–∞—Å: {training.time}\n"
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.type}\n"
        f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(get_training_participants(training_id))} –æ—Å—ñ–±"
    )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def delete_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[2])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    training = get_training_by_id(training_id)
    if not training:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="admin_edit_training")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=reply_markup)
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    training_info = f"{format_date(training.date)} {training.time} {training.type}"
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    session = Session()
    try:
        session.delete(training)
        session.commit()
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="admin_edit_training")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!\n\n"
            f"üìÖ {training_info}",
            reply_markup=reply_markup
        )
    except Exception as e:
        session.rollback()
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="admin_edit_training")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", reply_markup=reply_markup)
    finally:
        session.close()

async def view_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    text = f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(date)} ({weekday_ua}):\n\n"
    keyboard = []
    
    for training in trainings:
        participants = get_training_participants(training.id)
        text += f"‚è∞ {training.time} - {training.type}\n"
        text += f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(participants)} –æ—Å—ñ–±\n\n"
        keyboard.append([
            InlineKeyboardButton(
                f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {training.time}",
                callback_data=f"edit_existing_training_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_training")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def edit_existing_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[3])
    training = get_training_by_id(training_id)
    
    weekday = training.date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    keyboard = []
    for type in TRAINING_TYPES:
        if type != training.type:  # –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø
            keyboard.append([InlineKeyboardButton(type, callback_data=f"change_type_{training_id}_{type}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_trainings_{training.date.strftime('%Y-%m-%d')}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(training.date)} ({weekday_ua})\n"
        f"‚è∞ –ß–∞—Å: {training.time}\n"
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø: {training.type}\n\n"
        f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def view_existing_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[2])
    training = get_training_by_id(training_id)
    
    if not training:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_training_{training.date.strftime('%Y-%m-%d')}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=reply_markup)
        return
    
    weekday = training.date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"edit_existing_training_{training_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_training_{training.date.strftime('%Y-%m-%d')}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(training.date)} ({weekday_ua}):\n\n"
        f"‚è∞ –ß–∞—Å: {training.time}\n"
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training.type}\n"
        f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(get_training_participants(training_id))} –æ—Å—ñ–±"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def change_training_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    training_id = int(parts[2])
    new_type = parts[3]
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    training = get_training_by_id(training_id)
    if training:
        training.type = new_type
        session = Session()
        session.merge(training)
        session.commit()
        session.close()
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_trainings_{training.date.strftime('%Y-%m-%d')}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {new_type}",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_training")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∏–ø—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
            reply_markup=reply_markup
        )

async def add_paid_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    amount = int(parts[2])
    user_id = int(parts[3])
    
    user = get_user_by_id(user_id)
    if user:
        user.paid_trainings += amount
        session = Session()
        session.merge(user)
        session.commit()
        session.close()
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ {amount} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å!\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.display_name}\n"
            f"–û–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user.paid_trainings}",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=reply_markup
        )

async def change_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    context.user_data['editing_user_id'] = user_id
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"user_{user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=reply_markup
    )

async def change_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'editing_user_id' not in context.user_data:
        return
    
    user_id = context.user_data['editing_user_id']
    new_name = update.message.text
    
    user = get_user_by_id(user_id)
    if user:
        user.display_name = new_name
        session = Session()
        session.merge(user)
        session.commit()
        session.close()
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –Ü–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=reply_markup
        )
    
    del context.user_data['editing_user_id']

async def show_tomorrow_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    tomorrow = datetime.now().date() + timedelta(days=1)
    trainings = get_trainings_by_date(tomorrow)
    
    if not trainings:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ–º–∞—î.*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    text = f"üìÖ *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({format_date(tomorrow)}):*\n\n"
    
    for training in sorted(trainings, key=lambda x: x.time):
        participants = get_training_participants(training.id)
        text += f"‚è∞ *{training.time} - {training.type}*\n"
        text += f"üë• *–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ:* {len(participants)} –æ—Å—ñ–±\n"
        
        if participants:
            text += "*–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
            for reg in participants:
                user = get_user_by_id(reg.user_id)
                text += f"  ‚Ä¢ {user.display_name}\n"
        else:
            text += "*–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤*\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown') 