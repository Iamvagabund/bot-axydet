from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.ext.filters import Command
from datetime import datetime, timedelta
from database import (
    get_or_create_user, get_user_by_telegram_id, get_trainings_by_date,
    get_training_participants, get_user_training_registration, get_user_by_id,
    get_all_users, update_user_paid_trainings, update_user_expires_at, add_training,
    get_training_by_id, format_date, register_for_training
)
from config import ADMIN_IDS
from utils import format_date as utils_format_date
from sqlalchemy.orm import Session
from database import User, Session
import sqlalchemy
import sqlite3
import traceback

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def add_training_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        _, telegram_id, amount = update.message.text.split()
        telegram_id = int(telegram_id)
        amount = int(amount)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_training ID –ö–û–õ–ò–ß–ï–°–¢–í–û")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_telegram_id(telegram_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if not add_training(telegram_id, amount):
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç:\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {user.paid_trainings}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.expires_at.strftime('%d.%m.%Y') if user.expires_at else '–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è'}\n\n"
            f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."
        )
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_telegram_id(telegram_id)
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.display_name}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.expires_at.strftime('%d.%m.%Y')}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMIN_IDS:
        keyboard = [
            [InlineKeyboardButton("üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")],
            [InlineKeyboardButton("üë§ –ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-—Å—Ç—É–¥—ñ—ó –ê–•–£–î–Ñ–¢–¨! –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã *–í—ñ—Ç–∞—î–º–æ –≤ —Ñ—ñ—Ç–Ω–µ—Å-—Å—Ç—É–¥—ñ—ó –ê–•–£–î–Ñ–¢–¨!*\n\n"
            "üèãÔ∏è‚Äç‚ôÇÔ∏è *–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:*\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ç—Ä–µ–Ω–µ—Ä–∏\n"
            "‚Ä¢ –°—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è\n"
            "‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥\n"
            "‚Ä¢ –ó—Ä—É—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥\n\n"
            "üéØ *–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏'*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def show_client_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –Ω–∞–∂–∏–º–∞–µ—Ç "–ü–æ—á–∞—Ç–∏" –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    user = get_or_create_user(
        update.effective_user.id,
        update.effective_user.full_name
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="client_schedule")],
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="client_register")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="client_cancel")],
        [InlineKeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="test_profile")]
    ]
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üëã *–í—ñ—Ç–∞—î–º–æ, {user.display_name}!*\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user.paid_trainings > 0:
        text += f"üí∞ *–£ –≤–∞—Å –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ - {user.paid_trainings}*\n"
        if user.expires_at:
            text += f"üìÖ *–î—ñ–π—Å–Ω—ñ –¥–æ:* {user.expires_at.strftime('%d.%m.%Y')}\n\n"
        text += "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'\n\n"
    else:
        text += "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å*\n\n"
        text += "–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        text += "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å' —Ç–∞ –æ–±—Ä–∞—Ç–∏ –æ–ø—Ü—ñ—é –æ–ø–ª–∞—Ç–∏\n"
        text += "2Ô∏è‚É£ –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Å–∫–ª–∞–¥–Ω–æ—â—ñ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
    
    text += "üéØ *–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:*"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    trainings_by_day = {}
    for i in range(14):  # 7 –¥–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è + 7 –¥–Ω—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        date = monday + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            trainings_by_day[date] = trainings
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not trainings_by_day:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É
    text = "üèãÔ∏è‚Äç‚ôÇÔ∏è –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    
    for date, trainings in sorted(trainings_by_day.items()):
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{date.strftime('%d.%m.%Y')}*\n"
        text += f"*{weekday_ua}*\n"
        for training in sorted(trainings, key=lambda x: x.time):
            participants = get_training_participants(training.id)
            max_slots = 1 if training.type == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" else 3
            is_registered = get_user_training_registration(user.id, training.id) is not None
            checkmark = "‚úÖ" if is_registered else ""
            text += f"  {training.time} - {training.type} ({len(participants)}/{max_slots}) {checkmark}\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    user = get_user_by_telegram_id(update.effective_user.id)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    text = f"üìù *–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:*\n\n"
    text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    text += f"üìÖ *{date.strftime('%d.%m.%Y')}*\n"
    text += f"*{weekday_ua}*\n\n"
    
    keyboard = []
    for training in sorted(trainings, key=lambda x: x.time):
        participants = get_training_participants(training.id)
        max_slots = 1 if training.type == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" else 3
        is_registered = get_user_training_registration(user.id, training.id) is not None
        checkmark = "‚úÖ" if is_registered else ""
        text += f"‚è∞ *{training.time}* - {training.type} ({len(participants)}/{max_slots}) {checkmark}\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —á–∞—Å—É
        keyboard.append([
            InlineKeyboardButton(
                f"‚è∞ {training.time} - {training.type}",
                callback_data=f"client_training_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_register")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_training_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ training_id –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ callback_data
    if query.data.startswith('client_training_'):
        training_id = int(query.data.split('_')[2])
    else:  # –¥–ª—è register_ —Ç–∞ cancel_reg_
        training_id = int(query.data.split('_')[1])
    
    training = get_training_by_id(training_id)
    participants = get_training_participants(training_id)
    user = get_user_by_telegram_id(update.effective_user.id)
    
    weekday = training.date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    text = f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
    text += f"üìÖ *{format_date(training.date)}*\n"
    text += f"*{weekday_ua}*\n"
    text += f"‚è∞ *{training.time}*\n"
    text += f"*{training.type}*\n"
    max_slots = 1 if training.type == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" else 3
    text += f"üë• *–ó–∞–ø–∏—Å–∞–Ω–æ:* {len(participants)}/{max_slots}\n\n"
    text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
    
    if participants:
        for reg in participants:
            participant = get_user_by_id(reg.user_id)
            is_current_user = reg.user_id == user.id
            checkmark = "‚úÖ" if is_current_user else ""
            text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
    else:
        text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
    
    keyboard = []
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    is_registered = get_user_training_registration(user.id, training_id) is not None
    
    if is_registered:
        keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_reg_{training_id}")])
    else:
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{training_id}")])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_register_for_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[1])
    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –ø–æ—á–∞–ª–æ—Å—è
    training = get_training_by_id(training_id)
    training_time = datetime.combine(training.date, datetime.strptime(training.time, '%H:%M').time())
    current_time = datetime.now()
    
    if training_time <= current_time:
        await query.edit_message_text(
            "‚ùå *–ù–∞ –∂–∞–ª—å, –∑–∞–ø–∏—Å –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.*\n"
            "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –ø–æ—á–∞–ª–æ—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –æ–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    if training.type != "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" and user.paid_trainings <= 0:
        await query.edit_message_text(
            "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.*\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ [@yurivynnyk](https://t.me/yurivynnyk) –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    existing_reg = get_user_training_registration(user.id, training_id)
    if existing_reg:
        await query.edit_message_text(
            "‚ùå *–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.*",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_training_{training_id}")]]),
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—ñ–ª—å–Ω—ñ –º—ñ—Å—Ü—è
    participants = get_training_participants(training_id)
    max_slots = 1 if training.type == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" else 3
    if len(participants) >= max_slots:
        await query.edit_message_text(
            "‚ùå *–ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ.*",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")]]),
            parse_mode='Markdown'
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ database.py
    registration = register_for_training(user.id, training_id)
    if registration:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        user = get_user_by_telegram_id(telegram_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        training = get_training_by_id(training_id)
        participants = get_training_participants(training_id)
        
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text = f"‚úÖ *–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!*\n\n"
        if training.type != "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è":
            text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
        text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
        
        if participants:
            for reg in participants:
                participant = get_user_by_id(reg.user_id)
                is_current_user = reg.user_id == user.id
                checkmark = "‚úÖ" if is_current_user else ""
                text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
        else:
            text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_reg_{training_id}")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.* –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ training_id –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ callback_data
    if query.data.startswith('cancel_reg_'):
        training_id = int(query.data.split('_')[2])
    else:  # –¥–ª—è client_training_
        training_id = int(query.data.split('_')[2])
    
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –ø—ñ–∑–Ω–æ —Å–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏
    training = get_training_by_id(training_id)
    training_time = datetime.combine(training.date, datetime.strptime(training.time, '%H:%M').time())
    current_time = datetime.now()
    time_diff = training_time - current_time
    
    if time_diff.total_seconds() < 10800:  # 3 –≥–æ–¥–∏–Ω–∏ = 10800 —Å–µ–∫—É–Ω–¥
        await query.edit_message_text(
            "‚ùå *–ù–∞ –∂–∞–ª—å, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –≤–∂–µ –Ω–µ–º–æ–∂–ª–∏–≤–æ.*\n"
            "–ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ –∑–∞ 3 –≥–æ–¥–∏–Ω–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    registration = get_user_training_registration(user.id, training_id)
    if registration:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ database.py
        from database import cancel_registration as db_cancel_registration
        db_cancel_registration(registration.id)
        user.paid_trainings += 1
        update_user_paid_trainings(user.id, 1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        training = get_training_by_id(training_id)
        participants = get_training_participants(training_id)
        user = get_user_by_telegram_id(update.effective_user.id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text = f"‚úÖ *–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–ø–∏—Å –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!*\n\n"
        text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
        text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
        
        if participants:
            for reg in participants:
                participant = get_user_by_id(reg.user_id)
                is_current_user = reg.user_id == user.id
                checkmark = "‚úÖ" if is_current_user else ""
                text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
        else:
            text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{training_id}")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.*",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )

async def show_my_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)
    registrations = get_user_registrations(user.id)
    
    if not registrations:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.*\n"
            "–ó–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    text = "üìã *–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:*\n\n"
    keyboard = []
    
    # –°–æ—Ä—Ç—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
    sorted_registrations = sorted(
        registrations,
        key=lambda reg: (get_training_by_id(reg.training_id).date, get_training_by_id(reg.training_id).time)
    )
    
    for reg in sorted_registrations:
        training = get_training_by_id(reg.training_id)
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {format_date(training.date)} {training.time} - {training.type}",
                callback_data=f"cancel_reg_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_register_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)
    
    if user.paid_trainings <= 0:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å*\n\n"
            "–ê–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    trainings_by_day = {}
    for i in range(14):  # 7 –¥–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è + 7 –¥–Ω—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        date = monday + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            trainings_by_day[date] = trainings
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not trainings_by_day:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–ù–∞ –∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.*\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –º–µ–Ω—é
    text = f"üìù *–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É:*\n\n"
    text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    
    keyboard = []
    for date, trainings in sorted(trainings_by_day.items()):
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {date.strftime('%d.%m.%Y')} ({weekday_ua})",
                callback_data=f"client_day_{date.strftime('%Y-%m-%d')}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)

    text = f"üë§ *–ü—Ä–æ—Ñ—ñ–ª—å*\n\n"
    text += f"*–Ü–º'—è:* {user.display_name}\n"
    
    if user.paid_trainings > 0:
        text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n"
        if user.expires_at:
            text += f"üìÖ *–î—ñ–π—Å–Ω—ñ –¥–æ:* {user.expires_at.strftime('%d.%m.%Y')}\n"
    else:
        text += "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å*\n"
        if update.effective_user.id in ADMIN_IDS:
            text += "\n*–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –æ–ø–ª–∞—Ç–∏:*\n"
            text += "1Ô∏è‚É£ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
            text += "2Ô∏è‚É£ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
            text += "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data="change_name")]
    ]
    
    if update.effective_user.id in ADMIN_IDS and user.paid_trainings <= 0:
        keyboard.extend([
            [InlineKeyboardButton("üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å", callback_data="buy_8_trainings")],
            [InlineKeyboardButton("üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="buy_4_trainings")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="buy_1_training")]
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def start_change_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Implementation of start_change_name function
    pass

async def handle_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: ==========================================")
    print("DEBUG: handle_name_change called")
    print("DEBUG: update =", update)
    print("DEBUG: context =", context)
    print("DEBUG: context.user_data =", context.user_data)
    print("DEBUG: waiting_for_name =", context.user_data.get('waiting_for_name'))
    print("DEBUG: ==========================================")
    
    try:
        if not context.user_data.get('waiting_for_name'):
            print("DEBUG: Not waiting for name, ignoring message")
            return
            
        user_id = update.effective_user.id
        new_name = update.message.text.strip()
        print(f"DEBUG: New name = {new_name}")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
        if len(new_name) < 2:
            print("DEBUG: Name too short")
            await update.message.reply_text("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
            return
            
        if len(new_name) > 50:
            print("DEBUG: Name too long")
            await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ (—Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏)
        if not all(c.isalpha() or c.isspace() or c == '-' for c in new_name):
            print("DEBUG: Name contains invalid characters")
            await update.message.reply_text("‚ùå –Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤
        words = new_name.split()
        if len(words) > 3:
            print("DEBUG: Too many words")
            await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 3 —Å–ª—ñ–≤")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        if any(len(word) > 20 for word in words):
            print("DEBUG: Word too long")
            await update.message.reply_text("‚ùå –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 20 —Å–∏–º–≤–æ–ª—ñ–≤")
            return

        print("DEBUG: Name validation passed")
        print("DEBUG: Updating name in database")

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        session = Session()
        try:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                user.display_name = new_name
                session.commit()
                print("DEBUG: Name updated in database")
            else:
                print("DEBUG: User not found")
        finally:
            session.close()

        print("DEBUG: Removing waiting_for_name flag")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
        del context.user_data['waiting_for_name']

        print("DEBUG: Sending success message")

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="client_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞:* {new_name}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        print("DEBUG: Success message sent")
        
    except Exception as e:
        print(f"ERROR in handle_name_change: {e}")
        print(f"ERROR traceback: {traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.") 

async def handle_buy_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        return
    
    action = query.data
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è —á–µ—Ä–µ–∑ —Ä–æ–≤–Ω–æ –º–µ—Å—è—Ü
    now = datetime.now()
    if now.month == 12:
        expires_at = datetime(now.year + 1, 1, now.day, 23, 59, 59)
    else:
        expires_at = datetime(now.year, now.month + 1, now.day, 23, 59, 59)
    
    if action == "buy_8_trainings":
        user.paid_trainings += 8
        user.expires_at = expires_at
        update_user_paid_trainings(user.id, 8)
        update_user_expires_at(user.id, expires_at)
        text = "‚úÖ *–î–æ–¥–∞–Ω–æ 8 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–æ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É*\n"
        text += f"üìÖ *–î—ñ–π—Å–Ω—ñ –¥–æ:* {expires_at.strftime('%d.%m.%Y')}"
    elif action == "buy_4_trainings":
        user.paid_trainings += 4
        user.expires_at = expires_at
        update_user_paid_trainings(user.id, 4)
        update_user_expires_at(user.id, expires_at)
        text = "‚úÖ *–î–æ–¥–∞–Ω–æ 4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–æ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É*\n"
        text += f"üìÖ *–î—ñ–π—Å–Ω—ñ –¥–æ:* {expires_at.strftime('%d.%m.%Y')}"
    elif action == "buy_1_training":
        user.paid_trainings += 1
        user.expires_at = expires_at
        update_user_paid_trainings(user.id, 1)
        update_user_expires_at(user.id, expires_at)
        text = "‚úÖ *–î–æ–¥–∞–Ω–æ 1 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–æ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É*\n"
        text += f"üìÖ *–î—ñ–π—Å–Ω—ñ –¥–æ:* {expires_at.strftime('%d.%m.%Y')}"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="test_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_admin_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    users = get_all_users()
    text = "üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏*\n\n"
    text += "–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n\n"
    
    keyboard = []
    for user in users:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"üë§ {user.display_name}"
        if user.paid_trainings > 0:
            user_info += f" - {user.paid_trainings} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
            if user.expires_at:
                user_info += f" (–¥–æ {user.expires_at.strftime('%d.%m.%Y')})"
        else:
            user_info += " - –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
            
        keyboard.append([
            InlineKeyboardButton(
                user_info,
                callback_data=f"admin_user_{user.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_admin_user_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    user = get_user_by_id(user_id)
    
    text = f"üë§ *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:* {user.display_name}\n\n"
    text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    
    text += "*–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:*\n"
    text += "1Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
    text += "2Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
    text += "3Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ –æ–¥–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
    text += "4Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ 8 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å", callback_data=f"admin_add_8_{user.id}")],
        [InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ 4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"admin_add_4_{user.id}")],
        [InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ 1 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"admin_add_1_{user.id}")],
        [InlineKeyboardButton("üí≥ –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data=f"admin_add_personal_{user.id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_admin_add_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, _, action, user_id = query.data.split('_')
    user = get_user_by_id(int(user_id))
    
    if action == "8":
        amount = 8
    elif action == "4":
        amount = 4
    elif action == "personal":
        amount = 1  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    else:
        amount = 1
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ add_training
    if not add_training(user.telegram_id, amount):
        await query.edit_message_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç:\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {user.paid_trainings}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.expires_at.strftime('%d.%m.%Y') if user.expires_at else '–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è'}\n\n"
            f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
        )
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_id(int(user_id))
    training_type = "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" if action == "personal" else f"{amount} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
    await query.edit_message_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {training_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.display_name}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.expires_at.strftime('%d.%m.%Y')}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
    ) 