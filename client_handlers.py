from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from database import *
from config import ADMIN_IDS
from utils import format_date
from sqlalchemy.orm import Session
from database import User, Session
import sqlite3
import traceback

__all__ = [
    'start',
    'show_client_menu',
    'show_week_schedule',
    'show_day_trainings',
    'show_training_details',
    'handle_register_for_training',
    'cancel_registration',
    'show_my_trainings',
    'show_register_menu',
    'show_profile',
    'start_change_name',
    'handle_name_change'
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(
        update.effective_user.id,
        update.effective_user.full_name
    )
    
    if update.effective_user.id in ADMIN_IDS:
        keyboard = [
            [InlineKeyboardButton("üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")],
            [InlineKeyboardButton("üë§ –ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-—Å—Ç—É–¥—ñ—ó –ê–•–£–î–Ñ–¢–¨! –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
            reply_markup=reply_markup
        )
    else:
        await show_client_menu(update, context)

async def show_client_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="client_schedule")],
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="client_register")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="client_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üëã *–í—ñ—Ç–∞—î–º–æ, {user.display_name}!*\n\n"
    text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    text += "üéØ *–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:*"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_week_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    trainings_by_day = {}
    for i in range(14):  # 7 –¥–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è + 7 –¥–Ω—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        date = monday + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            trainings_by_day[date] = trainings
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not trainings_by_day:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–ù–∞ –∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.*\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É
    text = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:*\n\n"
    
    for date, trainings in sorted(trainings_by_day.items()):
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{format_date(date)}*\n"
        text += f"*{weekday_ua}*\n"
        for training in sorted(trainings, key=lambda x: x.time):
            participants = get_training_participants(training.id)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
            is_registered = any(reg.user_id == user.id for reg in participants)
            checkmark = "‚úÖ " if is_registered else ""
            text += f"  {checkmark}{training.time} - {training.type} ({len(participants)} –∑–∞–ø–∏—Å—ñ–≤)\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    user = get_user_by_telegram_id(update.effective_user.id)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    text = f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(date)} ({weekday_ua}):\n\n"
    
    for training in sorted(trainings, key=lambda x: x.time):
        participants = get_training_participants(training.id)
        is_registered = any(reg.user_id == user.id for reg in participants)
        checkmark = "‚úÖ " if is_registered else ""
        text += f"‚è∞ {checkmark}{training.time} - {training.type}\n"
        text += f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(participants)} –æ—Å—ñ–±\n\n"
    
    keyboard = []
    for training in trainings:
        keyboard.append([InlineKeyboardButton(
            f"‚úèÔ∏è {training.time} - {training.type}",
            callback_data=f"client_training_{training.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_schedule")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_training_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ training_id –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ callback_data
    if query.data.startswith('client_training_'):
        training_id = int(query.data.split('_')[2])
    else:  # –¥–ª—è register_ —Ç–∞ cancel_reg_
        training_id = int(query.data.split('_')[1])
    
    training = get_training_by_id(training_id)
    participants = get_training_participants(training_id)
    user = get_user_by_telegram_id(update.effective_user.id)
    
    weekday = training.date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    text = f"üí∞ –û–ø–ª–∞—á–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user.paid_trainings}\n\n"
    text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
    text += f"üìÖ *{format_date(training.date)}*\n"
    text += f"*{weekday_ua}*\n"
    text += f"‚è∞ *{training.time}*\n"
    text += f"*{training.type}*\n\n"
    text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
    
    if participants:
        for reg in participants:
            participant = get_user_by_id(reg.user_id)
            is_current_user = reg.user_id == user.id
            checkmark = "‚úÖ" if is_current_user else ""
            text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
    else:
        text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
    
    keyboard = []
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    is_registered = get_user_training_registration(user.id, training_id) is not None
    
    if is_registered:
        keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_reg_{training_id}")])
    else:
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{training_id}")])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_register_for_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[1])
    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –ø–æ—á–∞–ª–æ—Å—è
    training = get_training_by_id(training_id)
    training_time = datetime.combine(training.date, datetime.strptime(training.time, '%H:%M').time())
    current_time = datetime.now()
    
    if training_time <= current_time:
        await query.edit_message_text(
            "‚ùå *–ù–∞ –∂–∞–ª—å, –∑–∞–ø–∏—Å –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.*\n"
            "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –ø–æ—á–∞–ª–æ—Å—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    if user.paid_trainings <= 0:
        await query.edit_message_text(
            "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.*\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ [@yurivynnyk](https://t.me/yurivynnyk) –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    existing_reg = get_user_training_registration(user.id, training_id)
    if existing_reg:
        await query.edit_message_text(
            "‚ùå *–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.*",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_training_{training_id}")]]),
            parse_mode='Markdown'
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ database.py
    registration = register_for_training(telegram_id, training_id)
    if registration:
        user.paid_trainings -= 1
        update_user_paid_trainings(user.id, -1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        training = get_training_by_id(training_id)
        participants = get_training_participants(training_id)
        
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text = f"‚úÖ *–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!*\n\n"
        text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
        text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
        
        if participants:
            for reg in participants:
                participant = get_user_by_id(reg.user_id)
                is_current_user = reg.user_id == user.id
                checkmark = "‚úÖ" if is_current_user else ""
                text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
        else:
            text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_reg_{training_id}")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.* –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ training_id –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ callback_data
    if query.data.startswith('cancel_reg_'):
        training_id = int(query.data.split('_')[2])
    else:  # –¥–ª—è client_training_
        training_id = int(query.data.split('_')[2])
    
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –ø—ñ–∑–Ω–æ —Å–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏
    training = get_training_by_id(training_id)
    training_time = datetime.combine(training.date, datetime.strptime(training.time, '%H:%M').time())
    current_time = datetime.now()
    time_diff = training_time - current_time
    
    if time_diff.total_seconds() < 10800:  # 3 –≥–æ–¥–∏–Ω–∏ = 10800 —Å–µ–∫—É–Ω–¥
        await query.edit_message_text(
            "‚ùå *–ù–∞ –∂–∞–ª—å, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –≤–∂–µ –Ω–µ–º–æ–∂–ª–∏–≤–æ.*\n"
            "–ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ –∑–∞ 3 –≥–æ–¥–∏–Ω–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )
        return
    
    registration = get_user_training_registration(user.id, training_id)
    if registration:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ database.py
        from database import cancel_registration as db_cancel_registration
        db_cancel_registration(registration.id)
        user.paid_trainings += 1
        update_user_paid_trainings(user.id, 1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        training = get_training_by_id(training_id)
        participants = get_training_participants(training_id)
        
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text = f"‚úÖ *–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–ø–∏—Å –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!*\n\n"
        text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
        text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        text += f"üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:*\n"
        
        if participants:
            for reg in participants:
                participant = get_user_by_id(reg.user_id)
                is_current_user = reg.user_id == user.id
                checkmark = "‚úÖ" if is_current_user else ""
                text += f"‚Ä¢ {participant.display_name} {checkmark}\n"
        else:
            text += "‚Ä¢ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{training_id}")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"client_training_{training_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_day_{training.date.strftime('%Y-%m-%d')}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(
            "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.*",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]),
            parse_mode='Markdown'
        )

async def show_my_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)
    registrations = get_user_registrations(user.id)
    
    if not registrations:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.*\n"
            "–ó–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    text = "üìã *–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:*\n\n"
    keyboard = []
    
    # –°–æ—Ä—Ç—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
    sorted_registrations = sorted(
        registrations,
        key=lambda reg: (get_training_by_id(reg.training_id).date, get_training_by_id(reg.training_id).time)
    )
    
    for reg in sorted_registrations:
        training = get_training_by_id(reg.training_id)
        weekday = training.date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{format_date(training.date)}*\n"
        text += f"*{weekday_ua}*\n"
        text += f"‚è∞ *{training.time}*\n"
        text += f"*{training.type}*\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {format_date(training.date)} {training.time} - {training.type}",
                callback_data=f"cancel_reg_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_register_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = get_user_by_telegram_id(update.effective_user.id)
    
    if user.paid_trainings <= 0:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå *–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.*\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ [@yurivynnyk](https://t.me/yurivynnyk) –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    trainings_by_day = {}
    for i in range(14):  # 7 –¥–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è + 7 –¥–Ω—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        date = monday + timedelta(days=i)
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            trainings_by_day[date] = trainings
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not trainings_by_day:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî *–ù–∞ –∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.*\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É
    text = f"üìù *–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Å—É:*\n\n"
    text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
    keyboard = []
    
    for date, trainings in sorted(trainings_by_day.items()):
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        text += f"üìÖ *{format_date(date)}*\n"
        text += f"*{weekday_ua}*\n"
        for training in sorted(trainings, key=lambda x: x.time):
            participants = get_training_participants(training.id)
            is_registered = any(reg.user_id == user.id for reg in participants)
            checkmark = "‚úÖ " if is_registered else ""
            text += f"  {checkmark}{training.time} - {training.type} ({len(participants)} –∑–∞–ø–∏—Å—ñ–≤)\n"
        text += "\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ü—å–æ–≥–æ –¥–Ω—è
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {format_date(date)}",
                callback_data=f"client_day_{date.strftime('%Y-%m-%d')}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: ==========================================")
    print("DEBUG: show_profile called")
    print("DEBUG: update =", update)
    print("DEBUG: context =", context)
    print("DEBUG: ==========================================")
    try:
        query = update.callback_query
        print(f"DEBUG: callback_data = {query.data}")
        await query.answer()
        
        user = get_user_by_telegram_id(update.effective_user.id)
        print(f"DEBUG: User found: {user.display_name}")
        
        text = f"üë§ *–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç*\n\n"
        text += f"üëã *{user.display_name}*\n"
        text += f"üí∞ *–ó–∞–ª–∏—à–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:* {user.paid_trainings}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data="change_name")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client_menu")]
        ]
        
        if update.effective_user.id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("üîê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        print("DEBUG: Sending message")
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        print("DEBUG: Message sent")
    except Exception as e:
        print(f"ERROR in show_profile: {str(e)}")
        raise e

async def start_change_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Implementation of start_change_name function
    pass

async def handle_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: ==========================================")
    print("DEBUG: handle_name_change called")
    print("DEBUG: update =", update)
    print("DEBUG: context =", context)
    print("DEBUG: context.user_data =", context.user_data)
    print("DEBUG: waiting_for_name =", context.user_data.get('waiting_for_name'))
    print("DEBUG: ==========================================")
    
    try:
        if not context.user_data.get('waiting_for_name'):
            print("DEBUG: Not waiting for name, ignoring message")
            return
            
        user_id = update.effective_user.id
        new_name = update.message.text.strip()
        print(f"DEBUG: New name = {new_name}")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
        if len(new_name) < 2:
            print("DEBUG: Name too short")
            await update.message.reply_text("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
            return
            
        if len(new_name) > 50:
            print("DEBUG: Name too long")
            await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ (—Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏)
        if not all(c.isalpha() or c.isspace() or c == '-' for c in new_name):
            print("DEBUG: Name contains invalid characters")
            await update.message.reply_text("‚ùå –Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤
        words = new_name.split()
        if len(words) > 3:
            print("DEBUG: Too many words")
            await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 3 —Å–ª—ñ–≤")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        if any(len(word) > 20 for word in words):
            print("DEBUG: Word too long")
            await update.message.reply_text("‚ùå –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 20 —Å–∏–º–≤–æ–ª—ñ–≤")
            return

        print("DEBUG: Name validation passed")
        print("DEBUG: Updating name in database")

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        session = Session()
        try:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                user.display_name = new_name
                session.commit()
                print("DEBUG: Name updated in database")
            else:
                print("DEBUG: User not found")
        finally:
            session.close()

        print("DEBUG: Removing waiting_for_name flag")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
        del context.user_data['waiting_for_name']

        print("DEBUG: Sending success message")

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="client_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞:* {new_name}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        print("DEBUG: Success message sent")
        
    except Exception as e:
        print(f"ERROR in handle_name_change: {e}")
        print(f"ERROR traceback: {traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.") 