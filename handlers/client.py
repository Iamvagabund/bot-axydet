from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_or_create_user, get_trainings_by_date, get_training_by_id, get_training_participants
from utils import format_date, get_current_and_next_week_dates
from datetime import datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_db = get_or_create_user(user.id, user.full_name)
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å", callback_data="schedule")],
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="register")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-—Å—Ç—É–¥—ñ—ó –ê–•–£–î–Ñ–¢–¨, {user.full_name}! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup
    )

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    dates = get_current_and_next_week_dates()
    keyboard = []
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    all_trainings = []
    for date in dates:
        trainings = get_trainings_by_date(date)
        if trainings:
            all_trainings.extend(trainings)
    
    # –ì—Ä—É–ø—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–æ –¥–Ω—è—Ö
    trainings_by_day = {}
    for training in all_trainings:
        day = training.date.strftime('%Y-%m-%d')
        if day not in trainings_by_day:
            trainings_by_day[day] = []
        trainings_by_day[day].append(training)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–Ω—ñ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    for day, trainings in trainings_by_day.items():
        date = datetime.strptime(day, '%Y-%m-%d')
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –¥–∞—Ç–æ—é
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {format_date(date)} ({weekday_ua})",
                callback_data=f"day_{day}"
            )
        ])
    
    if not keyboard:
        await query.edit_message_text(
            "üòî –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–≤–∞ —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ:\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=reply_markup
    )

async def show_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[1]
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    
    keyboard = []
    for training in trainings:
        participants = get_training_participants(training.id)
        keyboard.append([
            InlineKeyboardButton(
                f"‚è∞ {training.time} - {training.type} ({len(participants)} —É—á–∞—Å–Ω–∏–∫—ñ–≤)",
                callback_data=f"training_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É", callback_data="schedule")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(date)}:\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=reply_markup
    )

async def show_training_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    training_id = int(query.data.split('_')[1])
    training = get_training_by_id(training_id)
    participants = get_training_participants(training_id)
    
    participants_text = "\n".join([f"üë§ {reg.user.display_name}" for reg in participants])
    if not participants_text:
        participants_text = "üòî –ü–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{training_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É", callback_data=f"day_{training.date.strftime('%Y-%m-%d')}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ç–∞–ª—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(training.date)}\n"
        f"‚è∞ –ß–∞—Å: {training.time}\n"
        f"üéØ –¢–∏–ø: {training.type}\n\n"
        f"üë• –£—á–∞—Å–Ω–∏–∫–∏:\n{participants_text}",
        reply_markup=reply_markup
    ) 