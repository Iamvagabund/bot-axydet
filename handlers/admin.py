from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    dates = get_current_and_next_week_dates()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
    all_trainings = []
    for date in dates:
        trainings = get_trainings_by_date(date)
        if trainings:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            all_trainings.extend(trainings)
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not all_trainings:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üòî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n"
            "–î–æ–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )
        return
    
    # –Ø–∫—â–æ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = []
    for training in all_trainings:
        date = training.date
        weekday = date.strftime('%A')
        weekday_ua = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }[weekday]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –¥–∞—Ç–æ—é —ñ —á–∞—Å–æ–º
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {format_date(date)} ({weekday_ua}) {training.time} - {training.type}",
                callback_data=f"admin_training_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ –¥–≤–∞ —Ç–∏–∂–Ω—ñ:",
        reply_markup=reply_markup
    )

async def show_day_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[2]  # admin_day_YYYY-MM-DD
    date = datetime.strptime(date_str, '%Y-%m-%d')
    trainings = get_trainings_by_date(date)
    
    keyboard = []
    for training in trainings:
        participants = get_training_participants(training.id)
        keyboard.append([
            InlineKeyboardButton(
                f"‚è∞ {training.time} - {training.type} ({len(participants)} –∑–∞–ø–∏—Å—ñ–≤)",
                callback_data=f"admin_training_{training.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É", callback_data="show_schedule")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    weekday = date.strftime('%A')
    weekday_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }[weekday]
    
    await query.edit_message_text(
        f"üìÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {format_date(date)} ({weekday_ua}):\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
        reply_markup=reply_markup
    ) 